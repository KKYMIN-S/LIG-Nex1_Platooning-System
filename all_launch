sudo chmod -R a+rx /media/soda/da379f50-c4e9-42d3-8f4a-5f6e4a6550ea/home/soda/rootOnNVMe
cd ~/ros2_ws
source install/setup.bash
sudo chmod 666 /dev/ttyUSB0
chmod +x ~/ros2_ws/run_teleop.sh
chmod +x ~/ros2_ws/run_slam.sh
chmod +x ~/ros2_ws/run_nav.sh
chmod +x run_tf.sh

------------------------------------------------------------
드라이브 새로 설치하고 난 후의 메뉴얼

sudo apt update
sudo apt upgrade

run_teleop.sh변경 
#!/bin/bash

echo "[] USB 권한 설정 중..."
sudo chmod 666 /dev/ttyUSB0

echo "[] ROS2 환경 세팅 중..."
source ~/ros2_ws/install/setup.bash

echo "[] odom_publisher 실행!"
ros2 run teleop_drive odom_publisher &

echo "[] teleop_listener 실행!"
ros2 run teleop_drive teleop_listener &

echo "[⌨️] 키보드 조작 창을 새 터미널로 엽니다..."
gnome-terminal -- bash -c "python3 /opt/ros/eloquent/lib/python3.6/site-packages/teleop_twist_keyboard.py"




sudo nano /opt/ros/eloquent/lib/python3.6/site-packages/teleop_twist_keyboard.py 변경
-> teleop_drive/twist_teleop_keyboard.py생성
##############################################
#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import sys
import termios
import tty
import select

msg = """
조작키:
---------------------------
이동:     
   w
a  s  d
   x

속도 조절:
q : 속도 증가
z : 속도 감소

조향 조절:
e : 오른쪽 조향 증가
c : 왼쪽 조향 증가

CTRL-C로 종료
"""

# 초기 설정값
speed = 0.02
steering = 1.0

speed_step = 0.01
steering_step = 0.1

class KeyboardTeleop(Node):
    def __init__(self):
        super().__init__('twist_keyboard_control')
        self.publisher = self.create_publisher(Twist, '/cmd_vel', 10)
        self.speed = speed
        self.steering = steering
        self.target_linear = 0.0
        self.target_angular = 0.0
        self.print_instructions()

    def print_instructions(self):
        print(msg)
        print(f"현재 속도: {self.speed:.2f}, 조향값: {self.steering:.2f}")

    def get_key(self):
        tty.setraw(sys.stdin.fileno())
        select.select([sys.stdin], [], [], 0)
        key = sys.stdin.read(1)
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
        return key

    def send_twist(self):
        twist = Twist()
        twist.linear.x = self.target_linear
        twist.angular.z = self.target_angular
        self.publisher.publish(twist)

    def run(self):
        try:
            while True:
                key = self.get_key()
                if key == 'w':
                    self.target_linear = self.speed
                    self.target_angular = 0.0  # ← 조향 초기화
                elif key == 'x':
                    self.target_linear = -self.speed
                    self.target_angular = 0.0  # ← 조향 초기화
                elif key == 's':
                    self.target_linear = 0.0
                    self.target_angular = 0.0
                elif key == 'a':
                    self.target_angular = self.steering
                elif key == 'd':
                    self.target_angular = -self.steering
                elif key == 'q':
                    self.speed += speed_step
                    print(f"속도 증가: {self.speed:.2f}")
                elif key == 'z':
                    self.speed = max(0.0, self.speed - speed_step)
                    print(f"속도 감소: {self.speed:.2f}")
                elif key == 'e':
                    self.steering = min(1.0, self.steering + steering_step)
                    print(f"조향 증가: {self.steering:.2f}")
                elif key == 'c':
                    self.steering = max(-1.0, self.steering - steering_step)
                    print(f"조향 감소: {self.steering:.2f}")
                elif key == '\x03':  # Ctrl-C
                    break

                self.send_twist()

        finally:
            twist = Twist()
            self.publisher.publish(twist)

# 실행 환경 준비
settings = termios.tcgetattr(sys.stdin)

def main(args=None):
    rclpy.init(args=args)
    node = KeyboardTeleop()
    node.run()
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
##############################################
teleop 다시 빌드
colcon build --packages-select teleop_drive
source install/setup.bash

map saver 빌드하는 법
cd ~/ros2_ws
sudo apt install libsdl1.2-dev libsdl-image1.2-dev libsdl2-dev libsdl2-image-dev
sudo apt install ros-eloquent-test-msgs

cd ~/ros2_ws
colcon build --packages-up-to nav2_map_server
source install/setup.bash

맵 저장 
~/ros2_ws에서 source install/setup.bash 한 후
ros2 run nav2_map_server map_saver -f 3f_map_v2

